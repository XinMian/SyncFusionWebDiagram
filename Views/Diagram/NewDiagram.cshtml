@using Syncfusion.EJ2;
@using Syncfusion.EJ2.Diagrams;
@using EssentialJS2WebApplicationDiagram.Controllers
@{
    ViewData["Title"] = "NewDiagram";

}

<div class="card bg-light text-dark" style="margin-top:10px">
    <div class="card-body">
        <h1 class="bd-title">New Diagram</h1>
    </div>
</div>
<div id="ControlRegion">
    <div id="palette-space" style="width:240px;height:100%; float:left; margin-top:-5px">
        <ejs-symbolpalette id="symbolPalette" getNodeDefaults="@ViewBag.getSymbolNode" symbolHeight="60" symbolWidth="60" expandMode="@ViewBag.Multiple" width="100%" height="100%" palettes="ViewBag.Palette" symbolMargin="new SymbolPaletteMargin() { Left=15,Right=15,Top=15,Bottom=15}" getSymbolInfo="@ViewBag.getSymbolInfo">
        </ejs-symbolpalette>
    </div>

    <div class="card bg-light text-dark" style="margin-top:10px;">
        <div class="card-body">
            <div id="diagram" style="width:100%;height:1300px; float:left;">

            </div>
        </div>
    </div>
    <br />
    <button class="btn btn-success" id="ExportPngButton" style="float: right;">Download PNG</button>
    <br />
    <br />
    <style>
        #container {
            display: block;
        }

        #symbolPalette {
            display: block;
        }
    </style>
    @section Scripts
        {
        <script>
            $(document).ready(function () {
                $("#ExportPngButton").click(function () {
                    var exportOptions = {};
                    exportOptions.format = "PNG";
                    exportOptions.mode = 'Download';
                    exportOptions.region = 'PageSettings';
                    exportOptions.fileName = 'Export';
                    exportOptions.margin = { left: 0, top: 0, bottom: 0, right: 0 };
                    diagram.exportDiagram(exportOptions);
                });
            });
        </script>
    }
    <script>
        function getNodeDefaults(obj, diagram) {
            if (obj.width === undefined) {
                obj.width = 145;
                obj.maxWidth = obj.width;
            }
            //else {
            //    //var ratio = 100 / obj.width;
            //    obj.width = 100;
            //    obj.maxWidth = obj.width;
            //    //obj.height *= ratio;
            //    obj.maxHeight = obj.height;
            //}
            obj.style = { fill: '#357BD2', strokeColor: 'white' };
            //Set ports
            obj.ports = getPorts(obj);
            return obj;
        }
        function getSymbolInfo(symbol) {
            return { fit: true };
        }
        var segments1 = [{ direction: 'Top', length: 120 }];
        var segments2 = [{ direction: 'Right', length: 100 }];
        function getConnectorDefaults(obj, diagram) {
            if (obj.id === 'connector9') {
                obj.segments = segments1;
            }
            if (obj.id === 'connector10') {
                obj.segments = segments2;
            }
            if (obj.id.indexOf('connector') !== -1) {
                obj.type = 'Orthogonal';
                obj.targetDecorator = { shape: 'Arrow', width: 10, height: 10 };
            }
        }
        function getPorts(obj) {
            var ports = [
                { id: 'port1', shape: 'Circle', offset: { x: 0, y: 0.5 } },
                { id: 'port2', shape: 'Circle', offset: { x: 0.5, y: 1 } },
                { id: 'port3', shape: 'Circle', offset: { x: 1, y: .5 } },
                { id: 'port4', shape: 'Circle', offset: { x: .5, y: 0 } }
            ];
            return ports;
        }
        function getSymbolNodes(symbol, diagram) {
            if (symbol.id === 'Terminator' || symbol.id === 'Process') {
                symbol.width = 80;
                symbol.height = 40;
            }
            else if (symbol.id === 'Decision' || symbol.id === 'Document' || symbol.id === 'PreDefinedProcess' ||
                symbol.id === 'PaperTap' || symbol.id === 'DirectData' || symbol.id === 'MultiDocument' || symbol.id === 'Data') {
                symbol.width = 50;
                symbol.height = 40;
            }
            else {
                symbol.width = 50;
                symbol.height = 50;
            }
            symbol.style.strokeWidth = 2;
        }

         ej.diagrams.Diagram.Inject(ej.diagrams.PrintAndExport);
        var checkBoxObj;
        var toolbarObj;
        var btnObj;
        var diagram;

        var nodes = [];
        var connectors = [];


        //nodes = @Html.Raw(ViewBag.nodesJson);
        //connectors = @Html.Raw(ViewBag.connectorsJson);

        //initialize the diagram control
        diagram = new ej.diagrams.Diagram({
            width: '100%', height: '720px', nodes: nodes,
            connectors: connectors,
            snapSettings: { constraints: ej.diagrams.SnapConstraints.None },
            pageSettings: { width: 550, height: 500, multiplePage: true },
            getConnectorDefaults: function (connector, diagram) {
                connector.style.strokeColor = '#6d6d6d';
                return connector;
            }
        });

        diagram.appendTo('#diagram');
    </script>
</div>
